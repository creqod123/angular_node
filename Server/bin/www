var app = require('../app');
var debug = require('debug')('exam:server');
var http = require('http');


// ============================== Socket ==============================

const socket = 4400
const { Server } = require('socket.io')
const cors = require('cors');
var port = normalizePort(process.env.PORT || '4200');
app.set('port', port);
app.use(cors());
var server = http.createServer(app);
const httpServer = require("http").createServer();

const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
    method: ["GET", "POST"]
  }
})

global.io = require('socket.io')(httpServer);
require('../socket/index').init();

httpServer.listen(socket, () => {
  console.info(`Socket server started on ${socket}`);
});



// ==============================        ==============================


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
